apiVersion: v1
kind: ConfigMap
metadata:
  name: resource-cache-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels.standard" . | nindent 4 }}
data:
  nginx.conf: |

    daemon                        off;
    error_log                     /var/log/nginx/error.log;
    worker_processes              1;

    events {
      worker_connections          {{ .Values.nginx.workerConnections }};
    }

    http {
      map $request $request_truncated {
         "~(?<tmp>.{0,200})" $tmp;
      }
      log_format custom '$remote_addr - $remote_user [$time_local] '
                          '"$request_truncated (TRUNCATED)" $status $body_bytes_sent $upstream_http_pragma'
                          '"$http_referer" "$http_user_agent"';
      access_log                  /var/log/nginx/access.log custom;
      keepalive_timeout           5s;
      proxy_cache_path            /var/cache/nginx
                                  levels=1:2
                                  keys_zone=default:10m
                                  max_size=10g
                                  inactive=1y;
      proxy_cache                 default;
      proxy_cache_lock            on;
      proxy_cache_use_stale       updating;
      proxy_cache_valid 200       1y;
      proxy_no_cache              $upstream_http_pragma;
      limit_req_zone "" zone=ratelimit:10m rate={{ .Values.nginx.rate }};
      limit_req_status 429;

      server {
        listen                    8010 default_server;

        add_header                X-Cache-Status $upstream_cache_status;
        add_header                X-Upstream     $upstream_http_server always;

        location /api/loglevel {
              proxy_pass              http://backend/api/loglevel;
              limit_except GET POST {
                # block does not inherit the access limitations from above
                deny all;
              }
              # kill cache
              proxy_cache                     off;
        }
        location / {
          limit_req zone=ratelimit burst={{ .Values.nginx.burst }} delay={{ .Values.nginx.delay }};
          proxy_set_header        X-Original-Host $http_x_orig_host;
          proxy_pass              http://backend/fetch/;
          proxy_cache_key         $http_x_orig_host/$request_uri;
          proxy_cache             default;
        }
      }
      upstream backend {
        server 127.0.0.1:8011     max_conns=512;
      }
    }
